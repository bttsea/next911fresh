{"version":3,"names":["_http","_interopRequireDefault","require","_next","e","__esModule","default","start","serverOptions","port","hostname","app","next","srv","http","createServer","getRequestHandler","Promise","resolve","reject","on","listen"],"sources":["start-server.ts"],"sourcesContent":["import http from 'http'\nimport next from '../next'\n\nexport default async function start(\n  serverOptions: any,\n  port?: number,\n  hostname?: string\n) {\n  const app = next(serverOptions)\n  const srv = http.createServer(app.getRequestHandler())\n  await new Promise((resolve, reject) => {\n    // This code catches EADDRINUSE error if the port is already in use\n    srv.on('error', reject)\n    srv.on('listening', () => resolve())\n    srv.listen(port, hostname)\n  })\n  // It's up to caller to run `app.prepare()`, so it can notify that the server\n  // is listening before starting any intensive operations.\n  return app\n}\n"],"mappings":"2DAAA,IAAAA,KAAA,CAAAC,sBAAA,CAAAC,OAAA,UACA,IAAAC,KAAA,CAAAF,sBAAA,CAAAC,OAAA,aAA0B,SAAAD,uBAAAG,CAAA,SAAAA,CAAA,EAAAA,CAAA,CAAAC,UAAA,CAAAD,CAAA,EAAAE,OAAA,CAAAF,CAAA,GAEX,cAAe,CAAAG,KAAKA,CACjCC,aAAkB,CAClBC,IAAa,CACbC,QAAiB,CACjB,CACA,KAAM,CAAAC,GAAG,CAAG,GAAAC,aAAI,EAACJ,aAAa,CAAC,CAC/B,KAAM,CAAAK,GAAG,CAAGC,aAAI,CAACC,YAAY,CAACJ,GAAG,CAACK,iBAAiB,CAAC,CAAC,CAAC,CACtD,KAAM,IAAI,CAAAC,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAK,CACrC;AACAN,GAAG,CAACO,EAAE,CAAC,OAAO,CAAED,MAAM,CAAC,CACvBN,GAAG,CAACO,EAAE,CAAC,WAAW,CAAE,IAAMF,OAAO,CAAC,CAAC,CAAC,CACpCL,GAAG,CAACQ,MAAM,CAACZ,IAAI,CAAEC,QAAQ,CAAC,CAC5B,CAAC,CAAC,CACF;AACA;AACA,MAAO,CAAAC,GAAG,CACZ","ignoreList":[]}