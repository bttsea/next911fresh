{"version":3,"names":["_fs","_interopRequireDefault","require","_path","_util","e","__esModule","default","readdir","promisify","fs","stat","recursiveReadDir","dir","filter","ignore","arr","rootDir","result","Promise","all","map","part","absolutePath","join","test","pathStat","isDirectory","push","replace","sort"],"sources":["recursive-readdir.ts"],"sourcesContent":["import fs from 'fs'\nimport { join } from 'path'\nimport { promisify } from 'util'\n\nconst readdir = promisify(fs.readdir)\nconst stat = promisify(fs.stat)\n\n/**\n * Recursively read directory\n * @param  {string} dir Directory to read\n * @param  {RegExp} filter Filter for the file name, only the name part is considered, not the full path\n * @param  {string[]=[]} arr This doesn't have to be provided, it's used for the recursion\n * @param  {string=dir`} rootDir Used to replace the initial path, only the relative path is left, it's faster than path.relative.\n * @returns Promise array holding all relative paths\n */\nexport async function recursiveReadDir(\n  dir: string,\n  filter: RegExp,\n  ignore?: RegExp,\n  arr: string[] = [],\n  rootDir: string = dir\n): Promise<string[]> {\n  const result = await readdir(dir)\n\n  await Promise.all(\n    result.map(async (part: string) => {\n      const absolutePath = join(dir, part)\n      if (ignore && ignore.test(part)) return\n\n      const pathStat = await stat(absolutePath)\n\n      if (pathStat.isDirectory()) {\n        await recursiveReadDir(absolutePath, filter, ignore, arr, rootDir)\n        return\n      }\n\n      if (!filter.test(part)) {\n        return\n      }\n\n      arr.push(absolutePath.replace(rootDir, ''))\n    })\n  )\n\n  return arr.sort()\n}\n"],"mappings":"+EAAA,IAAAA,GAAA,CAAAC,sBAAA,CAAAC,OAAA,QACA,IAAAC,KAAA,CAAAD,OAAA,SACA,IAAAE,KAAA,CAAAF,OAAA,SAAgC,SAAAD,uBAAAI,CAAA,SAAAA,CAAA,EAAAA,CAAA,CAAAC,UAAA,CAAAD,CAAA,EAAAE,OAAA,CAAAF,CAAA,GAEhC,KAAM,CAAAG,OAAO,CAAG,GAAAC,eAAS,EAACC,WAAE,CAACF,OAAO,CAAC,CACrC,KAAM,CAAAG,IAAI,CAAG,GAAAF,eAAS,EAACC,WAAE,CAACC,IAAI,CAAC,CAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACO,cAAe,CAAAC,gBAAgBA,CACpCC,GAAW,CACXC,MAAc,CACdC,MAAe,CACfC,GAAa,CAAG,EAAE,CAClBC,OAAe,CAAGJ,GAAG,CACF,CACnB,KAAM,CAAAK,MAAM,CAAG,KAAM,CAAAV,OAAO,CAACK,GAAG,CAAC,CAEjC,KAAM,CAAAM,OAAO,CAACC,GAAG,CACfF,MAAM,CAACG,GAAG,CAAC,KAAO,CAAAC,IAAY,EAAK,CACjC,KAAM,CAAAC,YAAY,CAAG,GAAAC,UAAI,EAACX,GAAG,CAAES,IAAI,CAAC,CACpC,GAAIP,MAAM,EAAIA,MAAM,CAACU,IAAI,CAACH,IAAI,CAAC,CAAE,OAEjC,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAf,IAAI,CAACY,YAAY,CAAC,CAEzC,GAAIG,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAE,CAC1B,KAAM,CAAAf,gBAAgB,CAACW,YAAY,CAAET,MAAM,CAAEC,MAAM,CAAEC,GAAG,CAAEC,OAAO,CAAC,CAClE,OACF,CAEA,GAAI,CAACH,MAAM,CAACW,IAAI,CAACH,IAAI,CAAC,CAAE,CACtB,OACF,CAEAN,GAAG,CAACY,IAAI,CAACL,YAAY,CAACM,OAAO,CAACZ,OAAO,CAAE,EAAE,CAAC,CAAC,CAC7C,CAAC,CACH,CAAC,CAED,MAAO,CAAAD,GAAG,CAACc,IAAI,CAAC,CAAC,CACnB","ignoreList":[]}