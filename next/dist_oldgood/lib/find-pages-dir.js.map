{"version":3,"names":["_fs","_interopRequireDefault","require","_path","e","__esModule","default","existsSync","f","fs","accessSync","constants","F_OK","_","findPagesDir","dir","curDir","path","join","Error"],"sources":["find-pages-dir.ts"],"sourcesContent":["import fs from 'fs'\nimport path from 'path'\n\nconst existsSync = (f: string): boolean => {\n  try {\n    fs.accessSync(f, fs.constants.F_OK)\n    return true\n  } catch (_) {\n    return false\n  }\n}\n\nexport function findPagesDir(dir: string): string {\n  // prioritize ./pages over ./src/pages\n  let curDir = path.join(dir, 'pages')\n  if (existsSync(curDir)) return curDir\n\n  curDir = path.join(dir, 'src/pages')\n  if (existsSync(curDir)) return curDir\n\n  // Check one level up the tree to see if the pages directory might be there\n  if (existsSync(path.join(dir, '..', 'pages'))) {\n    throw new Error(\n      '> No `pages` directory found. Did you mean to run `next` in the parent (`../`) directory?'\n    )\n  }\n\n  throw new Error(\n    \"> Couldn't find a `pages` directory. Please create one under the project root\"\n  )\n}\n"],"mappings":"uEAAA,IAAAA,GAAA,CAAAC,sBAAA,CAAAC,OAAA,QACA,IAAAC,KAAA,CAAAF,sBAAA,CAAAC,OAAA,UAAuB,SAAAD,uBAAAG,CAAA,SAAAA,CAAA,EAAAA,CAAA,CAAAC,UAAA,CAAAD,CAAA,EAAAE,OAAA,CAAAF,CAAA,GAEvB,KAAM,CAAAG,UAAU,CAAIC,CAAS,EAAc,CACzC,GAAI,CACFC,WAAE,CAACC,UAAU,CAACF,CAAC,CAAEC,WAAE,CAACE,SAAS,CAACC,IAAI,CAAC,CACnC,MAAO,KAAI,CACb,CAAE,MAAOC,CAAC,CAAE,CACV,MAAO,MAAK,CACd,CACF,CAAC,CAEM,QAAS,CAAAC,YAAYA,CAACC,GAAW,CAAU,CAChD;AACA,GAAI,CAAAC,MAAM,CAAGC,aAAI,CAACC,IAAI,CAACH,GAAG,CAAE,OAAO,CAAC,CACpC,GAAIR,UAAU,CAACS,MAAM,CAAC,CAAE,MAAO,CAAAA,MAAM,CAErCA,MAAM,CAAGC,aAAI,CAACC,IAAI,CAACH,GAAG,CAAE,WAAW,CAAC,CACpC,GAAIR,UAAU,CAACS,MAAM,CAAC,CAAE,MAAO,CAAAA,MAAM,CAErC;AACA,GAAIT,UAAU,CAACU,aAAI,CAACC,IAAI,CAACH,GAAG,CAAE,IAAI,CAAE,OAAO,CAAC,CAAC,CAAE,CAC7C,KAAM,IAAI,CAAAI,KAAK,CACb,2FACF,CAAC,CACH,CAEA,KAAM,IAAI,CAAAA,KAAK,CACb,+EACF,CAAC,CACH","ignoreList":[]}