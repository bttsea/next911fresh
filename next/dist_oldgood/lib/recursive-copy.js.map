{"version":3,"names":["_path","_interopRequireDefault","require","_fs","_util","_asyncSema","e","__esModule","default","mkdir","promisify","fs","stat","readdir","copyFile","COPYFILE_EXCL","constants","recursiveCopy","source","dest","concurrency","filter","cwdPath","process","cwd","from","path","resolve","to","sema","Sema","_copy","item","target","replace","stats","acquire","isDirectory","err","code","files","Promise","all","map","file","join","isFile","release"],"sources":["recursive-copy.ts"],"sourcesContent":["import path from 'path'\nimport fs from 'fs'\nimport { promisify } from 'util'\nimport { Sema } from 'async-sema'\n\nconst mkdir = promisify(fs.mkdir)\nconst stat = promisify(fs.stat)\nconst readdir = promisify(fs.readdir)\nconst copyFile = promisify(fs.copyFile)\n\nconst COPYFILE_EXCL = fs.constants.COPYFILE_EXCL\n\nexport async function recursiveCopy(\n  source: string,\n  dest: string,\n  {\n    concurrency = 255,\n    filter = () => true,\n  }: { concurrency?: number; filter?(path: string): boolean } = {}\n) {\n  const cwdPath = process.cwd()\n  const from = path.resolve(cwdPath, source)\n  const to = path.resolve(cwdPath, dest)\n\n  const sema = new Sema(concurrency)\n\n  async function _copy(item: string) {\n    const target = item.replace(from, to)\n    const stats = await stat(item)\n\n    await sema.acquire()\n\n    if (stats.isDirectory()) {\n      try {\n        await mkdir(target)\n      } catch (err) {\n        // do not throw `folder already exists` errors\n        if (err.code !== 'EEXIST') {\n          throw err\n        }\n      }\n      const files = await readdir(item)\n      await Promise.all(files.map(file => _copy(path.join(item, file))))\n    } else if (\n      stats.isFile() &&\n      // before we send the path to filter\n      // we remove the base path (from) and replace \\ by / (windows)\n      filter(item.replace(from, '').replace(/\\\\/g, '/'))\n    ) {\n      await copyFile(item, target, COPYFILE_EXCL)\n    }\n\n    sema.release()\n    return\n  }\n\n  await _copy(from)\n}\n"],"mappings":"yEAAA,IAAAA,KAAA,CAAAC,sBAAA,CAAAC,OAAA,UACA,IAAAC,GAAA,CAAAF,sBAAA,CAAAC,OAAA,QACA,IAAAE,KAAA,CAAAF,OAAA,SACA,IAAAG,UAAA,CAAAH,OAAA,eAAiC,SAAAD,uBAAAK,CAAA,SAAAA,CAAA,EAAAA,CAAA,CAAAC,UAAA,CAAAD,CAAA,EAAAE,OAAA,CAAAF,CAAA,GAEjC,KAAM,CAAAG,KAAK,CAAG,GAAAC,eAAS,EAACC,WAAE,CAACF,KAAK,CAAC,CACjC,KAAM,CAAAG,IAAI,CAAG,GAAAF,eAAS,EAACC,WAAE,CAACC,IAAI,CAAC,CAC/B,KAAM,CAAAC,OAAO,CAAG,GAAAH,eAAS,EAACC,WAAE,CAACE,OAAO,CAAC,CACrC,KAAM,CAAAC,QAAQ,CAAG,GAAAJ,eAAS,EAACC,WAAE,CAACG,QAAQ,CAAC,CAEvC,KAAM,CAAAC,aAAa,CAAGJ,WAAE,CAACK,SAAS,CAACD,aAAa,CAEzC,cAAe,CAAAE,aAAaA,CACjCC,MAAc,CACdC,IAAY,CACZ,CACEC,WAAW,CAAG,GAAG,CACjBC,MAAM,CAAGA,CAAA,GAAM,IACyC,CAAC,CAAG,CAAC,CAAC,CAChE,CACA,KAAM,CAAAC,OAAO,CAAGC,OAAO,CAACC,GAAG,CAAC,CAAC,CAC7B,KAAM,CAAAC,IAAI,CAAGC,aAAI,CAACC,OAAO,CAACL,OAAO,CAAEJ,MAAM,CAAC,CAC1C,KAAM,CAAAU,EAAE,CAAGF,aAAI,CAACC,OAAO,CAACL,OAAO,CAAEH,IAAI,CAAC,CAEtC,KAAM,CAAAU,IAAI,CAAG,GAAI,CAAAC,eAAI,CAACV,WAAW,CAAC,CAElC,cAAe,CAAAW,KAAKA,CAACC,IAAY,CAAE,CACjC,KAAM,CAAAC,MAAM,CAAGD,IAAI,CAACE,OAAO,CAACT,IAAI,CAAEG,EAAE,CAAC,CACrC,KAAM,CAAAO,KAAK,CAAG,KAAM,CAAAvB,IAAI,CAACoB,IAAI,CAAC,CAE9B,KAAM,CAAAH,IAAI,CAACO,OAAO,CAAC,CAAC,CAEpB,GAAID,KAAK,CAACE,WAAW,CAAC,CAAC,CAAE,CACvB,GAAI,CACF,KAAM,CAAA5B,KAAK,CAACwB,MAAM,CAAC,CACrB,CAAE,MAAOK,GAAG,CAAE,CACZ;AACA,GAAIA,GAAG,CAACC,IAAI,GAAK,QAAQ,CAAE,CACzB,KAAM,CAAAD,GAAG,CACX,CACF,CACA,KAAM,CAAAE,KAAK,CAAG,KAAM,CAAA3B,OAAO,CAACmB,IAAI,CAAC,CACjC,KAAM,CAAAS,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,GAAG,CAACC,IAAI,EAAIb,KAAK,CAACL,aAAI,CAACmB,IAAI,CAACb,IAAI,CAAEY,IAAI,CAAC,CAAC,CAAC,CAAC,CACpE,CAAC,IAAM,IACLT,KAAK,CAACW,MAAM,CAAC,CAAC,EACd;AACA;AACAzB,MAAM,CAACW,IAAI,CAACE,OAAO,CAACT,IAAI,CAAE,EAAE,CAAC,CAACS,OAAO,CAAC,KAAK,CAAE,GAAG,CAAC,CAAC,CAClD,CACA,KAAM,CAAApB,QAAQ,CAACkB,IAAI,CAAEC,MAAM,CAAElB,aAAa,CAAC,CAC7C,CAEAc,IAAI,CAACkB,OAAO,CAAC,CAAC,CACd,OACF,CAEA,KAAM,CAAAhB,KAAK,CAACN,IAAI,CAAC,CACnB","ignoreList":[]}